%{
	#include <stdio.h>
	#include "c-grammar.h"
	#include "symbol_table.h"
	
	void begin_local_scope();
	void end_local_scope();
  	
  	short int errores = 0;		
%}

%union {
        char *idval;
        char *constval;
        char *strval;
        }

/* precedencia en orden en que aparecen tokens, de menor (arriba) a mayor (abajo) */
%token	<idval> IDENTIFIER <constval> I_CONSTANT F_CONSTANT <strval> STRING_LITERAL FUNC_NAME SIZEOF
%token	PTR_OP INC_OP DEC_OP LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP
%token	<id> AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN
%token	<id> SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN
%token	<id> XOR_ASSIGN OR_ASSIGN
%token	TYPEDEF_NAME ENUMERATION_CONSTANT

%token	TYPEDEF EXTERN STATIC AUTO REGISTER INLINE
%token	CONST RESTRICT VOLATILE
%token	BOOL CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE VOID
%token	COMPLEX IMAGINARY 
%token	STRUCT UNION ENUM ELLIPSIS

%token	CASE DEFAULT IF ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN

%token	ALIGNAS ALIGNOF ATOMIC GENERIC NORETURN STATIC_ASSERT THREAD_LOCAL

%start translation_unit     /* define el start symbol */

%{
    /* typedef enum { LOCAL, GLOBAL } scope_type; */
    /* scope_type scope;                          */
  	int global_type_specifier = INT;
  	hash_table_type global_symbol_table, current_scope_symbol_table;	
%}
%%

primary_expression
	: IDENTIFIER            { if (yychar == YYEMPTY) yychar = YYLEX; /* yychar = lookahead token */
	                          if (yychar != '('){ /* not a function call */
	                            if (!lookup_string($1, current_scope_symbol_table) && !lookup_string($1, global_symbol_table)){
	                                yyerror ("Variable no declarada: "); fputs($1, stderr);}
	                            else PRINT("$");        
	                          }
	                          else if (!lookup_string($1, global_symbol_table)){ /* function call */
	                            fprintf(stderr, "Warning: Declaración implícita de la función %s\n", $1);
	                          }
	                          PRINT($1); free($1); }    
	| constant              
	| string
	| '(' expression ')'
	| generic_selection
	;

constant
	: I_CONSTANT            { PRINT($1); free($1); }  /* includes character_constant */
	| F_CONSTANT            { PRINT($1); free($1); }
	| ENUMERATION_CONSTANT	/* after it has been defined as such */
	;

enumeration_constant		/* before it has been defined as such */
	: IDENTIFIER
	;
	
left_parenthesis
	: '(' { PRINT("("); }
	;
	
right_parenthesis
	: ')' { PRINT(")"); }
	;
	
left_bracket
	: '[' { PRINT("["); }
	;
	
right_bracket
	: ']' { PRINT("]"); }
	;
	
left_curly
	: '{' { PRINT("{"); }
	;
	
right_curly
	: '}' { PRINT("}"); }
	;
	
assign_op
    : '=' { PRINT("="); }
    ;						

string
	: STRING_LITERAL        { PRINT($1); free($1); }
	| FUNC_NAME
	;

generic_selection
	: GENERIC '(' assignment_expression ',' generic_assoc_list ')'
	;

generic_assoc_list
	: generic_association
	| generic_assoc_list ',' generic_association
	;

generic_association
	: type_name ':' assignment_expression
	| DEFAULT ':' assignment_expression
	;

postfix_expression
	: primary_expression
	| postfix_expression '[' expression ']'
	| postfix_expression '(' { PRINT("("); } ')' { PRINT(")"); }
	| postfix_expression '(' { PRINT("("); } argument_expression_list ')' { PRINT(")"); }
	| postfix_expression '.' IDENTIFIER
	| postfix_expression PTR_OP IDENTIFIER
	| postfix_expression INC_OP { PRINT("++"); }
	| postfix_expression DEC_OP { PRINT("--"); }
	| '(' type_name ')' '{' initializer_list '}'
	| '(' type_name ')' '{' initializer_list ',' '}'
	;

argument_expression_list
	: assignment_expression
	| argument_expression_list ',' { PRINT(","); } assignment_expression
	;

unary_expression
	: postfix_expression
	| INC_OP { PRINT("++"); } unary_expression
	| DEC_OP { PRINT("--"); } unary_expression
	| unary_operator cast_expression
	| SIZEOF unary_expression
	| SIZEOF '(' type_name ')'
	| ALIGNOF '(' type_name ')'
	;

unary_operator
	: '&' { PRINT("&"); }
	| '*' { PRINT("*"); }
	| '+' { PRINT("+"); }
	| '-' { PRINT("-"); }
	| '~' { PRINT("~"); }
	| '!' { PRINT("!"); }
	;

cast_expression
	: unary_expression
	| '(' type_name ')' cast_expression
	;

multiplicative_expression
	: cast_expression
	| multiplicative_expression '*' { PRINT("*"); } cast_expression
	| multiplicative_expression '/' { PRINT("/"); } cast_expression
	| multiplicative_expression '%' { PRINT("%"); } cast_expression
	;

additive_expression
	: multiplicative_expression
	| additive_expression '+' { PRINT("+"); } multiplicative_expression
	| additive_expression '-' { PRINT("-"); } multiplicative_expression
	;

shift_expression
	: additive_expression
	| shift_expression LEFT_OP { PRINT("<<"); } additive_expression
	| shift_expression RIGHT_OP { PRINT(">>"); } additive_expression
	;

relational_expression
	: shift_expression
	| relational_expression '<' { PRINT("<"); } shift_expression
	| relational_expression '>' { PRINT(">"); } shift_expression
	| relational_expression LE_OP { PRINT("<="); } shift_expression
	| relational_expression GE_OP { PRINT(">="); } shift_expression
	;

equality_expression
	: relational_expression
	| equality_expression EQ_OP { PRINT("=="); } relational_expression
	| equality_expression NE_OP { PRINT("!="); } relational_expression
	;

and_expression
	: equality_expression
	| and_expression '&' { PRINT("&"); } equality_expression
	;

exclusive_or_expression
	: and_expression
	| exclusive_or_expression '^' { PRINT("^"); } and_expression
	;

inclusive_or_expression
	: exclusive_or_expression
	| inclusive_or_expression '|' { PRINT("|"); } exclusive_or_expression
	;

logical_and_expression
	: inclusive_or_expression
	| logical_and_expression AND_OP { PRINT("&&"); } inclusive_or_expression
	;

logical_or_expression
	: logical_and_expression
	| logical_or_expression OR_OP { PRINT("||"); } logical_and_expression
	;

conditional_expression
	: logical_or_expression
	| logical_or_expression '?' { PRINT("?"); } expression ':' { PRINT(":"); } conditional_expression
	;

assignment_expression
	: conditional_expression
	| unary_expression assignment_operator assignment_expression
	;

assignment_operator
	: assign_op    
	| MUL_ASSIGN                    { PRINT("*="); }
	| DIV_ASSIGN                    { PRINT("/="); }
	| MOD_ASSIGN                    { PRINT("%="); }
	| ADD_ASSIGN                    { PRINT("+="); }
	| SUB_ASSIGN                    { PRINT("-="); }
	| LEFT_ASSIGN                   { PRINT("<<="); }
	| RIGHT_ASSIGN                  { PRINT(">>="); }
	| AND_ASSIGN                    { PRINT("&="); }
	| XOR_ASSIGN                    { PRINT("^="); }
	| OR_ASSIGN                     { PRINT("|="); }
	;

expression
	: assignment_expression
	| expression ',' { PRINT(","); } assignment_expression
	;

constant_expression
	: conditional_expression	/* with constraints */
	;

declaration
	: declaration_specifiers ';' { PRINT(";"); }
	| declaration_specifiers init_declarator_list ';' { PRINT(";"); }
	| static_assert_declaration
	;

declaration_specifiers
	: storage_class_specifier declaration_specifiers
	| storage_class_specifier
	| type_specifier declaration_specifiers
	| type_specifier
	| type_qualifier declaration_specifiers
	| type_qualifier
	| function_specifier declaration_specifiers
	| function_specifier
	| alignment_specifier declaration_specifiers
	| alignment_specifier
	;

init_declarator_list
	: init_declarator
	| init_declarator_list ',' { PRINT(";"); } init_declarator
	;

init_declarator
	: declarator assign_op initializer
	| declarator
	;

storage_class_specifier
	: TYPEDEF	/* identifiers must be flagged as TYPEDEF_NAME */
	| EXTERN
	| STATIC
	| THREAD_LOCAL
	| AUTO
	| REGISTER
	;

type_specifier
	: VOID          { global_type_specifier = VOID; }
	| CHAR          { global_type_specifier = CHAR; }
	| SHORT         { global_type_specifier = SHORT; }
	| INT           { global_type_specifier = INT; }
	| LONG          { global_type_specifier = LONG; }
	| FLOAT         { global_type_specifier = FLOAT; }
	| DOUBLE        { global_type_specifier = DOUBLE; }
	| SIGNED
	| UNSIGNED
	| BOOL
	| COMPLEX
	| IMAGINARY	  	/* non-mandated extension */
	| atomic_type_specifier
	| struct_or_union_specifier
	| enum_specifier
	| TYPEDEF_NAME		/* after it has been defined as such */
	;

struct_or_union_specifier
	: struct_or_union '{' struct_declaration_list '}'
	| struct_or_union IDENTIFIER '{' struct_declaration_list '}'
	| struct_or_union IDENTIFIER
	;

struct_or_union
	: STRUCT
	| UNION
	;

struct_declaration_list
	: struct_declaration
	| struct_declaration_list struct_declaration
	;

struct_declaration
	: specifier_qualifier_list ';'	/* for anonymous struct/union */
	| specifier_qualifier_list struct_declarator_list ';'
	| static_assert_declaration
	;

specifier_qualifier_list
	: type_specifier specifier_qualifier_list
	| type_specifier
	| type_qualifier specifier_qualifier_list
	| type_qualifier
	;

struct_declarator_list
	: struct_declarator
	| struct_declarator_list ',' struct_declarator
	;

struct_declarator
	: ':' constant_expression
	| declarator ':' constant_expression
	| declarator
	;

enum_specifier
	: ENUM '{' enumerator_list '}'
	| ENUM '{' enumerator_list ',' '}'
	| ENUM IDENTIFIER '{' enumerator_list '}'
	| ENUM IDENTIFIER '{' enumerator_list ',' '}'
	| ENUM IDENTIFIER
	;

enumerator_list
	: enumerator
	| enumerator_list ',' enumerator
	;

enumerator	/* identifiers must be flagged as ENUMERATION_CONSTANT */
	: enumeration_constant '=' constant_expression
	| enumeration_constant
	;

atomic_type_specifier
	: ATOMIC '(' type_name ')'
	;

type_qualifier
	: CONST
	| RESTRICT
	| VOLATILE
	| ATOMIC
	;

function_specifier
	: INLINE
	| NORETURN
	;

alignment_specifier
	: ALIGNAS '(' type_name ')'
	| ALIGNAS '(' constant_expression ')'
	;

declarator
	: pointer direct_declarator
	| direct_declarator
	;

direct_declarator
	: IDENTIFIER            { if (yychar == YYEMPTY) yychar = YYLEX; /* yychar = lookahead token */
	                          if (yychar == '('){
	                            PRINT("function "); /* function */
	                            table_insert($1, global_type_specifier, global_symbol_table);
	                            begin_local_scope();
	                          }
	                          else {
	                            PRINT("$");                       /* var */
	                            table_insert($1, global_type_specifier, current_scope_symbol_table);
	                          }
	                          printf("ID: %s, TYPE: %d\n", $1, global_type_specifier);                          
	                          PRINT($1); free($1); 
	                        }
	| '(' declarator ')'
	| direct_declarator '[' ']'
	| direct_declarator '[' '*' ']'
	| direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'
	| direct_declarator '[' STATIC assignment_expression ']'
	| direct_declarator '[' type_qualifier_list '*' ']'
	| direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'
	| direct_declarator '[' type_qualifier_list assignment_expression ']'
	| direct_declarator '[' type_qualifier_list ']'
	| direct_declarator '[' assignment_expression ']'
	| direct_declarator '(' { PRINT("("); } parameter_type_list ')' { PRINT(")"); }
	| direct_declarator '(' ')' { PRINT("()"); }
	| direct_declarator '(' identifier_list ')'
	;

pointer
	: '*' type_qualifier_list pointer
	| '*' type_qualifier_list
	| '*' pointer
	| '*'
	;

type_qualifier_list
	: type_qualifier
	| type_qualifier_list type_qualifier
	;


parameter_type_list
	: parameter_list ',' { PRINT(","); } ELLIPSIS
	| parameter_list
	;

parameter_list
	: parameter_declaration
	| parameter_list ',' { PRINT(","); } parameter_declaration
	;

parameter_declaration
	: declaration_specifiers declarator
	| declaration_specifiers abstract_declarator
	| declaration_specifiers
	;

identifier_list
	: IDENTIFIER
	| identifier_list ',' IDENTIFIER
	;

type_name
	: specifier_qualifier_list abstract_declarator
	| specifier_qualifier_list
	;

abstract_declarator
	: pointer direct_abstract_declarator
	| pointer
	| direct_abstract_declarator
	;

direct_abstract_declarator
	: '(' abstract_declarator ')'
	| '[' ']'
	| '[' '*' ']'
	| '[' STATIC type_qualifier_list assignment_expression ']'
	| '[' STATIC assignment_expression ']'
	| '[' type_qualifier_list STATIC assignment_expression ']'
	| '[' type_qualifier_list assignment_expression ']'
	| '[' type_qualifier_list ']'
	| '[' assignment_expression ']'
	| direct_abstract_declarator '[' ']'
	| direct_abstract_declarator '[' '*' ']'
	| direct_abstract_declarator '[' STATIC type_qualifier_list assignment_expression ']'
	| direct_abstract_declarator '[' STATIC assignment_expression ']'
	| direct_abstract_declarator '[' type_qualifier_list assignment_expression ']'
	| direct_abstract_declarator '[' type_qualifier_list STATIC assignment_expression ']'
	| direct_abstract_declarator '[' type_qualifier_list ']'
	| direct_abstract_declarator '[' assignment_expression ']'
	| '(' ')'
	| '(' parameter_type_list ')'
	| direct_abstract_declarator '(' ')'
	| direct_abstract_declarator '(' parameter_type_list ')'
	;

initializer
	: '{' initializer_list '}'
	| '{' initializer_list ',' '}'
	| assignment_expression
	;

initializer_list
	: designation initializer
	| initializer
	| initializer_list ',' designation initializer
	| initializer_list ',' initializer
	;

designation
	: designator_list '='
	;

designator_list
	: designator
	| designator_list designator
	;

designator
	: '[' constant_expression ']'
	| '.' IDENTIFIER
	;

static_assert_declaration
	: STATIC_ASSERT '(' constant_expression ',' STRING_LITERAL ')' ';'
	;

statement
	: labeled_statement
	| compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	;

labeled_statement
	: IDENTIFIER ':' statement
	| CASE { PRINT("case"); } constant_expression ':' { PRINT(":"); } statement
	| DEFAULT ':' { PRINT("default:"); } statement
	;

compound_statement
	: left_curly right_curly
	| left_curly  block_item_list right_curly
	;

block_item_list
	: block_item
	| block_item_list block_item
	;

block_item
	: declaration
	| statement
	;

expression_statement
	: ';' { PRINT(";"); } 
	| expression ';' { PRINT(";"); }
	;
	
if
    : IF { PRINT("if"); }
    ;	

selection_statement
	: if left_parenthesis expression right_parenthesis statement ELSE { PRINT("else"); } statement
	| if left_parenthesis expression right_parenthesis statement
	| SWITCH { PRINT("switch"); } left_parenthesis expression right_parenthesis statement
	;

iteration_statement
	: WHILE { PRINT("while"); } left_parenthesis expression right_parenthesis statement 
	| DO statement WHILE '(' expression ')' ';'
	| FOR '(' expression_statement expression_statement ')' statement
	| FOR '(' expression_statement expression_statement expression ')' statement
	| FOR '(' declaration expression_statement ')' statement
	| FOR '(' declaration expression_statement expression ')' statement
	;

jump_statement
	: GOTO IDENTIFIER ';'
	| CONTINUE ';'                  { PRINT("continue;"); }
	| BREAK ';'                     { PRINT("break;"); }
	| RETURN ';'                    { PRINT("return;"); }
	| RETURN { PRINT("return "); } expression ';' { PRINT(";"); }
	;

translation_unit
	: external_declaration
	| translation_unit external_declaration
	;

external_declaration
	: function_definition
	| declaration
	;

function_definition
	: declaration_specifiers declarator declaration_list compound_statement { end_local_scope(); }
	| declaration_specifiers declarator compound_statement                  { end_local_scope(); }

declaration_list
	: declaration
	| declaration_list declaration
	;

%%

void begin_local_scope(){
    /* scope = LOCAL;    */
    current_scope_symbol_table = create_table(); /* crear symbol table */     
}

void end_local_scope(){
    /* scope = GLOBAL;  */
    free_table(current_scope_symbol_table); /* liberar memoria */    
    current_scope_symbol_table = global_symbol_table; /* current scope = GLOBAL */     
}

int main(){
    
    pFile = fopen (FILENAME , "w");
    if (pFile == NULL) perror ("Error al abrir el archivo");
    fputs ("<?php\n\n", pFile);
    
    global_symbol_table = create_table(); /* crear symbol table para global scope */
    current_scope_symbol_table = global_symbol_table; /* current scope = GLOBAL */  
    
    yyparse();
    
    fputs ("\n\n?>", pFile);
    fclose (pFile);
    
    if (errores > 0){
	    if( remove( FILENAME ) != 0 )
		  	perror( "Error al intentar eliminar el archivo" );
  		else
  		    printf("%d errores detectados\n", errores);
            puts( "No se generará traducción. Archivo eliminado exitosamente" );		
	}
	
	free_table(global_symbol_table); /* liberar memoria */
    
    return 0;
}

int yyerror (char const *message) {
  fputs(message, stderr);
  fputc('\n', stderr);
  errores++;
  return 0;
}
